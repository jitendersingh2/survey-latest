//@version 0.0.1, Sat Nov 24 2018
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\app.js
(function(window, angular, undefined) {

    'use strict';

    /**
     * Initialize entire application.
     *
     * @namespace Applications
     * @class erusurvey
     */
    angular
        .module('erusurvey', [

            'ngRoute',
            'erusurvey.config',
            'erusurvey.services.trackFactory',
            'erusurvey.services.userInfoService',
            'erusurvey.controllers.homeCtrl'

        ])
        .config ([
            '$routeProvider',
            'config',
            function ($routeProvider, config) {

                $routeProvider.
                    when ('/', {
                        templateUrl: config.partials.viewHome,
                        caseInsensitiveMatch: true
                    }).
                    otherwise({
                        redirectTo: '/'
                    });

            }]);

})(this, window.angular);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\config.stage.js
(function (window, angular, undefined) {

    'use strict';

    /**
     * Create a configuration object shared between all modules.
     *
     * @namespace Constant
     * @class config
     */
    angular
        .module('erusurvey.config', [])
        .constant('config', {

            namespace: 'erusurvey',
            analytics: true,
            debug: false,
            appUrlRoot: '/members/secure/account/erusurvey/',
            servicesTimeout: 120000,
            services: {
                dataCapture: '/members/services/sec/surveytouchpoints',
                userInfo: '/members/secure/data/erusurvey.json'
            },
            partials: {
                viewHome: '/assets/members/secure/apps/erusurvey/components/home/view.home.htm'
            }
        });

})(this, window.angular);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\components\home\controller.home.js
(function(window, angular, undefined) {
  "use strict";

  /**
   * Home/ERU Survey view controller.
   *
   * @namespace Controllers
   * @class homeCtrl
   */
  angular
    .module("erusurvey.controllers.homeCtrl", [
      'erusurvey.services.userInfoService',
      'erusurvey.services.trackFactory'
    ])
    .controller("homeCtrl", [
      "userInfoService",
      "trackFactory",
      "config",
      function(
        userInfoService,
        trackFactory,
        config
      ) {
        var userInfo;
        var self = this;

        self.isMemberHasTeleHealth = true;
        self.isMemberHasHealthLineBlue = true;
        self.isMemberRewardble = true;

        self.firstQPage = true;
        self.secondQPage = false;
        self.thirdQPage = false;
        self.fourthQPage = false;
        self.teleHealthPage = false;
        self.healthLineBluePage = false;
        self.rewardPage = false;
        self.surveyConfirmation = false;
        self.printCustomizedGuide = false;
        self.hideSubmitBtn = false;

        
        /*
        * Get userinfo here
        */
        userInfoService.getUserInfo()
          .then(function(response) {
            userInfo = response;
            self.isMemberHasTeleHealth = userInfo.telehealth === "true" ? true : false;
            self.isMemberHasHealthLineBlue = userInfo.healthLineBlue === "true" ? true : false;
          }, function(error) {
            console.log('error- ', error);
          });

        
        /*
        * 1st Question
        */
        self.showAnsweredCorrectly = false;
        self.showAnsweredInCorrectly = false;
        self.firstAnswers = [];
        self.insertFirstAnswers = function(e) {
          var val = e.target.value;
          if (e.target.checked) {
            self.firstAnswers.push(val);
          } else {
            self.firstAnswers.pop();
          }
        };

        self.submitFirstAnswer = function(e) {
          e.preventDefault();
          if (self.firstAnswers.length === 3) {
            self.showAnsweredCorrectly = true;
          } else {
            self.showAnsweredInCorrectly = true;
          }
          self.hideSubmitBtn = true;
        };

        self.next2 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.firstQPage = false;
          self.secondQPage = true;
        };


        /*
        * 2nd Question
        */
        self.secondAnsweredYes = false;
        self.secondAnsweredNo = false;
        self.secondAnswer = '';
        self.selectSecondAnswer = function(e) {
          self.secondAnswer = e.target.value;
          if (self.hideSubmitBtn) {
            self.secondAnsweredYes = self.secondAnswer === 'YES';
            self.secondAnsweredNo = self.secondAnswer === 'NO';
          }
        };

        self.submitSecondAnswer = function(e) {
          e.preventDefault();
          if (self.secondAnswer === "") {
            return true;
          }
          if (self.secondAnswer === "YES") {
            self.secondAnsweredYes = true;
          } else if (self.secondAnswer === "NO") {
            self.secondAnsweredNo = true;
          }

          self.hideSubmitBtn = true;
        };

        self.next3 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.secondQPage = false;
          self.thirdQPage = true;
        };


        /*
        * 3rd Question
        */
        self.showThirdAnsweredCorrectly = false;
        self.showThirdAnsweredInCorrectly = false;
        self.thirdAnswers = [];
        self.selectThirdAnswers = function(e) {
          var val = e.target.value;
          if (e.target.checked) {
            self.thirdAnswers.push(val);
          } else {
            self.thirdAnswers.pop();
          }
        };

        self.submitThirdAnswer = function(e) {
          e.preventDefault();
          if (self.thirdAnswers.length === 4) {
            self.showThirdAnsweredCorrectly = true;
          } else {
            self.showThirdAnsweredInCorrectly = true;
          }
          self.hideSubmitBtn = true;
        };

        self.next4 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.thirdQPage = false;
          self.fourthQPage = true;
        };

        
        /*
        * 4th Question
        */
        self.fourthAnsweredYes = false;
        self.fourthAnsweredNo = false;
        self.fourthAnswer = '';
        self.selectFourthAnswer = function(e) {
          self.fourthAnswer = e.target.value;
          if (self.hideSubmitBtn) {
            self.fourthAnsweredYes = self.fourthAnswer === 'YES';
            self.fourthAnsweredNo = self.fourthAnswer === 'NO';
          }
        };

        self.submitFourthAnswer = function(e) {
          e.preventDefault();
          if (self.fourthAnswer === "") {
            return true;
          }
          if (self.fourthAnswer === "YES") {
            self.fourthAnsweredYes = true;
          } else if (self.fourthAnswer === "NO") {
            self.fourthAnsweredNo = true;
          }

          self.hideSubmitBtn = true;
        };

        self.next5 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.fourthQPage = false;
          if (self.isMemberHasTeleHealth) {
            self.teleHealthPage = true;
            return true;
          }
          if (self.isMemberHasHealthLineBlue) {
            self.healthLineBluePage = true;
            return true;
          }
          self.rewardPage = true;
        };

        
        /*
        * Tele Health
        */
        self.showTeleHealthAnsweredCorrectly = false;
        self.showTeleHealthAnsweredInCorrectly = false;
        self.teleHealthAnswers = [];
        self.selectTeleHealthAnswers = function(e) {
          var val = e.target.value;
          if (e.target.checked) {
            self.teleHealthAnswers.push(val);
          } else {
            self.teleHealthAnswers.pop();
          }
        };

        self.submitTeleHealthAnswers = function(e) {
          e.preventDefault();
          if (self.teleHealthAnswers.length === 0) {
            return true;
          }
          if (self.teleHealthAnswers.indexOf('Chest Pain') === -1) {
            self.showTeleHealthAnsweredCorrectly = true;
          } else {
            self.showTeleHealthAnsweredInCorrectly = true;
          }
          self.hideSubmitBtn = true;
        };

        self.next6 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.teleHealthPage = false;
          if (self.isMemberHasHealthLineBlue) {
            self.healthLineBluePage = true;
            return true;
          }
          self.rewardPage = true;
        };

        
        /*
        * Health Line Blue
        */
        self.showHealthLineBlueAnsweredCorrectly = false;
        self.showHealthLineBlueAnsweredInCorrectly = false;
        self.healthLineBlueAnswers = [];
        self.selectHealthLineBlueAnswers = function(e) {
          var val = e.target.value;
          if (e.target.checked) {
            self.healthLineBlueAnswers.push(val);
          } else {
            self.healthLineBlueAnswers.pop();
          }
        };

        self.submitHealthLineBlueAnswers = function(e) {
          e.preventDefault();
          if (self.healthLineBlueAnswers.length === 4) {
            self.showHealthLineBlueAnsweredCorrectly = true;
          } else {
            self.showHealthLineBlueAnsweredInCorrectly = true;
          }
          self.hideSubmitBtn = true;
        };

        self.next7 = function (e) {
          e.preventDefault();
          self.hideSubmitBtn = false;
          self.healthLineBluePage = false;
          self.rewardPage = true;
        };

        
        /*
        * Rewards
        */
        self.printCustomizedGuide = function() {

          self.surveyConfirmation = true;

          var currDate = moment().toISOString();
          // TouchPoint Service POST Data
          var surveyData = {
            success: "Y",
            "eventEndTimestamp":currDate,
            "eventStartTimestamp":currDate,
            "extensionDataElement":[
              {
                "name":"ImportanceofRegularDoctor",
                "value":self.firstAnswers.length > 0 ? self.firstAnswers.join(',') : ''
              },
              {
                "name":"haveRegulardoctorForRoutineCheckups",
                "value":self.secondAnswer === 'YES' ? "YES,'DoctorName':"+"'"+self.doctorName+"',"+"'PhoneNumber':"+"'"+self.doctorPhoneNumber+"',"+"'OfficeHours':"+"'"+self.officeHours+"',"+"'AfterOurHours':"+"'"+self.afterHoursNumber+"'" : 'NO'
              },
              {
                "name":"whyGoToConvenienceCareOrUrgentCareCenter",
                "value":self.thirdAnswers.length > 0 ? self.thirdAnswers.join(',') : ''
              },
              {
                "name":"whichUrgentcareCenterClosestToYourHome",
                "value": self.fourthAnswer === 'YES' ? "YES,'NameLocation':"+"'"+self.careCenterNameAndLocation+"',"+"'PhoneNumber':"+"'"+self.careCenterPhoneNumber+"',"+"'Hours':"+"'"+self.careCenterOpeningHours+"'" : 'NO'
              },
              {
                "name":"healthIssuesHandledByTelehealthConsultant",
                "value":self.teleHealthAnswers.length > 0 ? self.teleHealthAnswers.join(',') : ''
              },
              {
                "name":"phoneNumberForOurNurseSupportLine",
                "value":self.healthLineBlueAnswers.length > 0 ? self.healthLineBlueAnswers.join(',') : ''
              }
            ]
          };

          // Calling Touch Point Service
          trackFactory.set('SURVEY_ACTIVITY_CENTER', surveyData, false, true);

          // Print Quick Reference Guide PDF
          var documentId = 'pdfDocument';
          var printedContentId = 'printedCustimizedGuide';
          var doc = document.getElementById(documentId);
          var printedContent = document.getElementById(printedContentId).innerHTML;

          doc.contentWindow.document.body.innerHTML = printedContent;

          doc.contentWindow.focus();
          doc.contentWindow.print();
        };


        /*
        * Common
        */
        self.onInputChange = function(e) {
          self[e.target.name] = e.target.value;
        };
      }
    ]);
})(this, window.angular);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\services\track\factory.track.js
(function(window, angular, moment, undefined) {

    'use strict';


    /**
     * @ngdoc service
     * @name erusurvey.services.trackFactory. : trackFactory
     * @description Create a log against a predefined global object. Access analytics services such as Adobe DTM and TouchPoint history.
     * @requires $window A reference to the browser's window object {@link https://docs.angularjs.org/api/ng/service/$window}
     * @requires $filter used for formatting data displayed to the user. {@link https://docs.angularjs.org/api/ng/service/$filter}
     * @requires adobeAnalyticsService
     * @requires dataCaptureService
     * @requires config
     */
    angular
        .module('erusurvey.services.trackFactory', [

            'erusurvey.services.adobe-analytics',
            'erusurvey.services.dataCaptureService',
            'erusurvey.filters.internalDataFilter'

        ])
        .factory('trackFactory', [
            '$window',
            '$filter',
            'adobeAnalyticsService',
            'dataCaptureService',
            'config',
            function($window, $filter, adobeAnalyticsService, dataCaptureService, config) {

                var namespaceConfig = config.namespace,
                    debugConfig     = config.debug,
                    analyticsConfig = config.analytics,
                    internalCache   = null;


                return {

                    /**
                     * @ngdoc method
                     * @name set
                     * @methodOf erusurvey.services.trackFactory. : trackFactory
                     * @description Set analytics and debugging data.
                     * @param {String} name The key to set an error against.
                     * @param {*} data Data to store/set.
                     * @param {Boolean} adobe adobe
                     * @param {Boolean} touchpoint touchpoint
                     */
                    set: function(name, data, adobe, touchpoint) {

                        var runAnalytics    = analyticsConfig,
                            localTimestamp  = moment().toISOString(),
                            typeObject      = { adobe:(adobe||false), touchpoint:(touchpoint||false) },
                            internalData    = angular.extend({ data:data, timestamp:localTimestamp }, typeObject);

                        internalCache = internalCache || {};
                        internalCache[name] = internalData;

                        $window[namespaceConfig] = $filter('internalDataFilter')(internalCache);


                        if (debugConfig) {

                            try {
                                console.log(namespaceConfig+'/'+name+':', internalData);
                            } catch (e) {}
                        }


                        if (runAnalytics && (adobe === true || touchpoint === true)) {

                            adobeAnalyticsService.emitEvent(name, data);
                        }


                        if (runAnalytics && touchpoint === true) {

                            dataCaptureService.track(name, data);
                        }
                    }

                };
            }]);


})(this, window.angular, window.moment);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\services\track\filter.internal-data.js
(function(window, angular, moment, undefined){

    'use strict';


    /**
     * @ngdoc filter
     * @name erusurvey.filters.internalDataFilter. : internalDataFilter
     * @description Parse internal data for display.
     */
    angular
        .module('erusurvey.filters.internalDataFilter', [

        ])
        .filter('internalDataFilter', [
            function() {


                /**
                 * @ngdoc method
                 * @name internalDataFilter
                 * @methodOf erusurvey.filters.internalDataFilter. : internalDataFilter
                 * @description Parse internal data for display.
                 * @param {Object} internalData internalData
                 * @returns {Array} internalDataFilter internalDataFilter
                 */
                return function(internalData) {

                    var filteredData = [];

                    angular.forEach(internalData, function(value, key) {

                        var codeOrigin = key.split('/')[0];

                        var response = {

                            timestamp:      value.timestamp,
                            success:        null,
                            error:          null,
                            fail:           null,
                            adobe:          value.adobe,
                            touchpoint:     value.touchpoint,
                            displayTitle:   key,
                            displayMessage: null,
                            displayData:    null,
                            xhr:            false,
                            filter:         false,
                            cache:          false,
                            catch:          false,
                            abstract:       false,
                            codeOrigin:     codeOrigin,
                            responseTime:   null
                        };


                        if (typeof value.data == 'string') {

                            response.displayMessage = value.data;

                        } else {

                            if (value.data.status) {

                                response.xhr = true;
                            }

                            if (value.data.responseTime) {

                                response.responseTime = value.data.responseTime;
                            }

                            response.displayData = value.data;
                        }


                        if ((/\/success/i).test(key)) {

                            response.success = true;

                        } else if ((/\/error/i).test(key)) {

                            response.error = true;

                        } else if ((/\/fail/i).test(key)) {

                            response.fail = true;
                        }


                        if ((/filter/i).test(key)) {

                            response.filter = true;
                        }

                        if ((/cache/i).test(key)) {

                            response.cache = true;
                        }

                        if ((/catch/i).test(key)) {

                            response.catch = true;
                        }

                        if (!response.filter && !response.xhr && !response.cache && !response.catch && !response.error) {

                            response.abstract = true;
                        }


                        filteredData.push(response);
                    });


                    filteredData.sort(function(a, b) {
                        var dateA = new Date(a.timestamp).getTime();
                        var dateB = new Date(b.timestamp).getTime();
                        return dateA - dateB;
                    });

                    return filteredData;
                };
            }]);

})(this, window.angular, window.moment);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\services\track\service.analytics.js
(function(window, angular, undefined) {

    'use strict';


    /**
     * @ngdoc service
     * @name erusurvey.services.adobe-analytics. : adobeAnalyticsService
     * @description Emits events to rootScope to be picked up by Adobe Analytics.
     * @requires $rootScope angular application's single root scope {@link https://docs.angularjs.org/api/ng/service/$rootScope}
     * @requires $window A reference to the browser's window object {@link https://docs.angularjs.org/api/ng/service/$window}
     * @requires config
     */
    angular
        .module('erusurvey.services.adobe-analytics', [

        ])
        .service('adobeAnalyticsService', [
            '$rootScope',
            '$window',
            'config',
            function($rootScope, $window, config) {

                var namespace       = config.namespace,
                    adobeNamespace  = 'bcbsncDataLayer';


                /**
                 * @ngdoc method
                 * @name emitEvent
                 * @methodOf erusurvey.services.adobe-analytics. : adobeAnalyticsService
                 * @description Stores data against the global window object.
                 * @param {String} name name
                 * @param {*} data data
                 */
                this.emitEvent = function(name, data) {

                    if(typeof name === 'undefined') {

                        return;
                    }

                    data = data || {};

                    if (angular.isObject(data)) {

                        data.eventId = name;
                    }

                    if (!(adobeNamespace in $window)) {

                        $window[adobeNamespace] = {};
                    }

                    if (!(namespace in $window[adobeNamespace])) {

                        $window[adobeNamespace][namespace] = {};
                    }

                    $window[adobeNamespace][namespace][name] = data;
                };

            }]);

})(this, window.angular);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\services\track\service.touchpoint.js
(function(window, angular, undefined) {

    'use strict';


    /**
     * @ngdoc service
     * @name erusurvey.services.dataCaptureService. : dataCaptureService
     * @description Emits events to the Data Capture REST API, TouchPoint History, with AngularJS.
     * @requires $window A reference to the browser's window object {@link https://docs.angularjs.org/api/ng/service/$window}
     * @requires $http a core AngularJS service that facilitates communication with the remote HTTP servers via the browser's XMLHttpRequest object or via JSONP. {@link https://docs.angularjs.org/api/ng/service/$http}
     * @requires $q service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing. {@link https://docs.angularjs.org/api/ng/service/$q}
     * @requires config config
     */
    angular
        .module('erusurvey.services.dataCaptureService', [

        ])
        .service('dataCaptureService', [
            '$window',
            '$http',
            '$q',
            'config',
            function($window, $http, $q, config) {

                var serviceUrl = config.services.dataCapture;


                /**
                 * @ngdoc method
                 * @name track
                 * @methodOf erusurvey.services.dataCaptureService. : dataCaptureService
                 * @description Tracks an event.
                 * @param {String} code code
                 * @param {Object} data data
                 * @returns {Object} promise promise
                 */
                this.track = function(code, data) {

                    var url         = serviceUrl,
                        passData    = data || {};

                    var eventObject = {

                        transactionStatus: passData.success ? 'SUCCESS' : 'FAILURE',
                        touchpointTransactionContextCode: code
                    };

                    delete passData.success;

                    angular.extend(eventObject, passData);
                    
                    return $http({
                            url: url,
                            method: 'POST',
                            data: eventObject,
                            withCredentials: (($window.document.location.hostname||'').indexOf('localhost') < 0),
                            cache:false
                        })
                        .then(function(response) {

                            return response.data;
                            
                        }, function(error) {

                            return $q.reject({});
                        });
                };

            }]);

})(this, window.angular);
//@file E:\Siva\BCBS-Projects\Extra\git\survey-latest\src\services\userinfo\service.userinfo.js
(function(window, angular, undefined) {

    'use strict';

    angular
        .module('erusurvey.services.userInfoService', [

        ])
        .service('userInfoService', [
            '$window',
            '$http',
            '$q',
            'config',
            function($window, $http, $q, config) {

                var serviceUrl = config.services.userInfo;

                
                /**
                 * @ngdoc method
                 * @name getUserInfo
                 * @methodOf erusurvey.services.userInfoService. : userInfoService
                 * @description Return an user info.
                 * @returns {Object} promise promise
                 */
                this.getUserInfo = function() {

                    var url = serviceUrl;

                    return $http({
                            url: url,
                            method: 'GET',
                            withCredentials: (($window.document.location.hostname||'').indexOf('localhost') < 0)
                        })
                        .then(function(response) {
                            
                            return response.data;

                        }, function(error) {

                            return $q.reject({});
                        });
                };

            }]);

})(this, window.angular);